generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model migrations {
  id        Int    @id @default(autoincrement())
  timestamp BigInt
  name      String @db.VarChar(255)
}

model Address {
  id         Int        @id @default(autoincrement())
  street     String     @db.VarChar(255)
  number     String?    @db.VarChar(16)
  complement String?    @db.VarChar(255)
  district   String     @db.VarChar(255)
  city       String     @db.VarChar(255)
  state      String     @db.VarChar(255)
  country    String     @db.VarChar(255)
  zipCode    String     @db.VarChar(8)
  personId   Int
  createdAt  DateTime   @default(now()) @db.DateTime(0)
  updatedAt  DateTime   @default(now()) @db.DateTime(0)
  person     Person     @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "FK_addresses_persons")
  Schedule   Schedule[]

  @@index([personId], map: "FK_addresses_persons")
  @@map("addresses")
}

model Contact {
  id        Int      @id @default(autoincrement())
  personId  Int
  email     String   @db.VarChar(250)
  message   String   @db.Text
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @db.DateTime(0)
  person    Person   @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "FK_contacts_persons")

  @@index([personId], map: "FK_contacts_persons")
  @@map("contacts")
}

model PasswordRecovery {
  id        Int       @id @default(autoincrement())
  token     String    @db.VarChar(255)
  userId    Int
  resetAt   DateTime? @db.DateTime(0)
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime  @default(now()) @db.DateTime(0)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "FK_password_recoveries_users")

  @@index([userId], map: "FK_password_recoveries_users")
  @@map("password_recoveries")
}

model PaymentSituation {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(45)
  createdAt DateTime   @default(now()) @db.DateTime(0)
  updatedAt DateTime   @default(now()) @db.DateTime(0)
  schedule  Schedule[]

  @@map("payment_situations")
}

model Person {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(250)
  birthAt   DateTime?  @db.Date
  phone     String?    @db.VarChar(16)
  document  String?    @db.VarChar(14)
  createdAt DateTime   @default(now()) @db.DateTime(0)
  updatedAt DateTime   @default(now()) @db.DateTime(0)
  Address   Address[]
  Contact   Contact[]
  Schedule  Schedule[]
  User      User[]

  @@map("persons")
}

model ScheduleService {
  scheduleId Int
  serviceId  Int
  createdAt  DateTime @default(now()) @db.DateTime(0)
  updatedAt  DateTime @default(now()) @db.DateTime(0)
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "FK_schedule_services_schedules")
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "FK_schedule_services_services")

  @@id([scheduleId, serviceId])
  @@index([serviceId], map: "FK_schedule_services_services")
  @@map("schedule_services")
}

model Schedule {
  id                 Int               @id @default(autoincrement())
  personId           Int
  timeOptionId       Int
  paymentSituationId Int
  billingAddressId   Int
  scheduleAt         DateTime          @db.DateTime(0)
  total              Decimal           @default(0.00) @db.Decimal(10, 2)
  installments       Int               @default(1) @db.TinyInt
  document           String            @db.VarChar(255)
  paymentMethod      String            @db.VarChar(255)
  cardToken          String            @db.VarChar(255)
  createdAt          DateTime          @default(now()) @db.DateTime(0)
  updatedAt          DateTime          @default(now()) @db.DateTime(0)
  address            Address           @relation(fields: [billingAddressId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "FK_schedules_addresses")
  paymentSituation   PaymentSituation  @relation(fields: [paymentSituationId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "FK_schedules_payment_situations")
  person             Person            @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "FK_schedules_persons")
  timeOption         TimeOption        @relation(fields: [timeOptionId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "FK_schedules_time_options")
  ScheduleService    ScheduleService[]

  @@index([billingAddressId], map: "FK_schedules_addresses")
  @@index([paymentSituationId], map: "FK_schedules_payment_situations")
  @@index([personId], map: "FK_schedules_persons")
  @@index([timeOptionId], map: "FK_schedules_time_options")
  @@map("schedules")
}

model Service {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(45)
  description     String            @db.MediumText
  price           Decimal           @db.Decimal(10, 2)
  createdAt       DateTime          @default(now()) @db.DateTime(0)
  updatedAt       DateTime          @default(now()) @db.DateTime(0)
  ScheduleService ScheduleService[]

  @@map("services")
}

model TimeOption {
  id        Int        @id @default(autoincrement())
  day       Int        @db.TinyInt
  time      DateTime   @db.Time(0)
  createdAt DateTime   @default(now()) @db.DateTime(0)
  updatedAt DateTime   @default(now()) @db.DateTime(0)
  schedule  Schedule[]

  @@map("time_options")
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique(map: "UQ_97672ac88f789774dd47f7c8be3") @db.VarChar(250)
  password         String             @db.VarChar(250)
  photo            String?            @db.VarChar(255)
  personId         Int
  createdAt        DateTime           @default(now()) @db.DateTime(0)
  updatedAt        DateTime           @default(now()) @db.DateTime(0)
  person           Person             @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "FK_users_persons")
  passwordRecovery PasswordRecovery[]

  @@index([personId], map: "FK_users_persons")
  @@map("users")
}
